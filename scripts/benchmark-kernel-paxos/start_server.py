#!/usr/bin/env python3
"""
Setups the system based on mac addresses
"""
import argparse
import subprocess
import re
import json
import os
import sys
import time
import signal


def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--interface", "-i", default="enp0s8", help="name of iface")
    parser.add_argument("--config", "-c", type=argparse.FileType(), help="config file to use, see README.", required=True)

    return parser.parse_args()

def get_id(interface_name):
    cmd = "ip link show dev {}".format(interface_name)
    result = subprocess.check_output(cmd.split()).decode()
    match = re.search("ether ([0-9a-f:]+)", result)
    mac = match.group(1)
    return int(mac.split(":")[-1], 16)

def mac_offset(base, offset):
    """
    Returns the MAC address with the given offset.

    >>> mac_offset("5C:A1:AB:1E:00:00", 0x34)
    '5C:A1:AB:1E:00:34'
    """
    base = base.split(":")
    last = int(base[-1], 16) + offset
    base[-1] = hex(last)[2:]
    return ":".join(base)

def generate_config_file(outfile, config):
    def write_category(category):
        base = config['mac_prefix']
        min_offset = min(config[category + 's'])
        for offset in config[category + 's']:
            line = "{} {} {}\n".format(category, offset - min_offset, mac_offset(base, offset))
            outfile.write(line)

    outfile.write("# autogenerated, do not edit\n")
    write_category('acceptor')
    write_category('proposer')
    write_category('learner')
    outfile.write("learner-catch-up yes\n")
    outfile.write("verbosity info\n")


def main():
    args = parse_args()
    config = json.load(args.config)

    if os.getuid() != 0:
        print("I am sorry, I think you should be root")
        sys.exit(1)

    print("creating config file")
    with open('paxos.conf', 'w') as f:
        generate_config_file(f, config)

    my_id = get_id(args.interface)
    if my_id in config['acceptors']:
        module_name = 'kacceptor.ko'
    elif my_id in config['learners']:
        module_name = 'klearner.ko'
    elif my_id in config['proposers']:
        module_name = 'kproposer.ko'
    else:
        print("Did not find how we belong to cluster, aborting...")
        print("ID was {}".format(my_id))
        sys.exit(1)

    basedir = os.path.dirname(__file__)
    module = os.path.join(basedir, 'kernel-paxos', 'build', module_name)

    print("loading {}".format(module_name))
    cmd = "insmod {mod} id={id} if_name={interface} path=./paxos.conf"
    cmd = cmd.format(mod=module, id=0, interface=args.interface)
    subprocess.call(cmd.split())

    def on_exit(*args):
        cmd = "rmmod {}".format(module_name)
        print("exiting, removing module")
        subprocess.call(cmd.split())

    signal.signal(signal.SIGTERM, on_exit)
    try:
        while True:
            time.sleep(10)
    except KeyboardInterrupt:
        pass

    on_exit()

if __name__ == '__main__':
    main()
